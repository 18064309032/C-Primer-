#include <string>
#include <iostream>
#include <vector>
#include <algorithm>

class HasPtr
{
public:
	friend void swap(HasPtr&, HasPtr&);
	friend bool operator<(const HasPtr& lhs, const HasPtr& rhs);

	HasPtr(const std::string& s = std::string())
		: ps(new std::string(s)), i(0)
	{}

	HasPtr(const HasPtr& hp)
		: ps(new std::string(*hp.ps)), i(hp.i)
	{}

	HasPtr& operator=(HasPtr tmp)
	{
		this->swap(tmp);
		return *this;
	}

	~HasPtr()
	{
		delete ps;
	}

	void swap(HasPtr& rhs)
	{
		using std::swap;
		swap(ps, rhs.ps);
		swap(i, rhs.i);
		std::cout << "call swap(HasPtr &rhs)" << std::endl;
	}
	std::string& getPs() { return *ps; }
	void show() const
	{
		std::cout << *ps << std::endl;
	}
private:
	std::string* ps;
	int i;
};



bool operator<(const HasPtr& lhs, const HasPtr& rhs)
{
	return *lhs.ps < *rhs.ps;
}

inline
void swap(HasPtr& lhs, HasPtr& rhs)
{
	using std::swap;
	swap(lhs.ps, rhs.ps);
	swap(lhs.i, rhs.i);
	std::cout << "call swap(HasPtr& lhs, HasPtr& rhs)" << std::endl;
}

int main()
{
	std::vector<HasPtr> vcr;
	HasPtr h1("Hello");
	HasPtr h2("Word!");
	vcr.push_back(h1);
	vcr.push_back(h2);
	std::sort(vcr.begin(), vcr.end());
	for (auto v : vcr)
		std::cout << v.getPs() << std::endl;
	return 0;
}