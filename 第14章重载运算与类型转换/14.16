//StrBlob.h

#pragma once
#ifndef STRVEC_H
#define STRVEC_H
#include <string>
#include <vector>
#include <memory>
#include <algorithm>
#include <stdexcept>
#include "StrBlobPtr.h"
class StrBlob
{
private:
	friend class StrBlobPtr;
	friend bool operator==(const StrBlob&, const StrBlob&);
	friend bool operator!=(const StrBlob&, const StrBlob&);
	friend bool operator>(const StrBlob&, const StrBlob&);
	friend bool operator<(const StrBlob&, const StrBlob&);
private:
	typedef std::vector<std::string>::size_type size_type;
private:
	std::shared_ptr<std::vector<std::string>> m_data;
public:
	StrBlob();
	StrBlob(std::initializer_list<std::string>);
	size_type size()const;
	bool empty()const;
	void push_back(const std::string&);
	void pop_back();
	std::string& front()const;
	std::string& back()const;
private:
	size_type check(size_type, const std::string&);
};
bool operator==(const StrBlob&, const StrBlob&);
bool operator!=(const StrBlob&, const StrBlob&);
bool operator>(const StrBlob&, const StrBlob&);
bool operator<(const StrBlob&, const StrBlob&);
#endif

//StrBlob.cpp

#include "StrBlob.h"

StrBlob::StrBlob() :m_data(std::make_shared<std::vector<std::string>>()) {}

StrBlob::StrBlob(std::initializer_list<std::string> str)
	: m_data(std::make_shared<std::vector<std::string>>(str)) {}

StrBlob::size_type StrBlob::size()const { return m_data->size(); }

bool StrBlob::empty()const { return m_data->empty(); }

void StrBlob::push_back(const std::string& str)
{
	m_data->push_back(str);
}

void StrBlob::pop_back() { m_data->pop_back(); }

std::string& StrBlob::front()const
{
	return m_data->front();
}

std::string& StrBlob::back()const
{
	return m_data->back();
}

StrBlob::size_type StrBlob::check(StrBlob::size_type sz, const std::string& msg)
{
	if (sz >= m_data->size())
		throw std::out_of_range(msg);
	return sz;
}

bool operator==(const StrBlob& first, const StrBlob& last)
{
	return *first.m_data == *last.m_data;
}
bool operator!=(const StrBlob& first, const StrBlob& last)
{
	return !(first == last);
}

bool operator<(const StrBlob& first, const StrBlob& last)
{
	return std::lexicographical_compare
	(first.m_data->begin(), first.m_data->end(), last.m_data->begin(), last.m_data->end());
}

bool operator>(const StrBlob& first, const StrBlob& last)
{
	return !(first < last);
}

//StrBlobPtr.h

#pragma once
#ifndef STRBLOBPTR_H
#define STRBLOBPTR_H
#include <memory>
#include <stdexcept>
#include <algorithm>
#include <vector>
#include <string>
#include "StrBlob.h"
class StrBlobPtr
{
private:
	friend class StrBlob;
private:
	friend bool operator==(const StrBlobPtr&, const StrBlobPtr&);
	friend bool operator!=(const StrBlobPtr&, const StrBlobPtr&);
	friend bool operator>(const StrBlobPtr&, const StrBlobPtr&);
	friend bool operator<(const StrBlobPtr&, const StrBlobPtr&);
private:
	std::size_t m_curr;
	std::weak_ptr<std::vector<std::string>> m_wptr;
public:
	StrBlobPtr();
	StrBlobPtr(StrBlob&, std::size_t);
	std::string& deref()const;
private:
	std::shared_ptr<std::vector<std::string>> check(std::size_t, const std::string&)const;
};
bool operator==(const StrBlobPtr&, const StrBlobPtr&);
bool operator!=(const StrBlobPtr&, const StrBlobPtr&);
bool operator>(const StrBlobPtr&, const StrBlobPtr&);
bool operator<(const StrBlobPtr&, const StrBlobPtr&);

#endif

//StrBlobPtr.cpp

#include "StrBlobPtr.h"

StrBlobPtr::StrBlobPtr() :m_curr(0) {}

StrBlobPtr::StrBlobPtr(StrBlob& sb, std::size_t sz) : m_wptr(sb.m_data), m_curr(sz) {}

std::string& StrBlobPtr::deref()const
{
	auto p = StrBlobPtr::check(m_curr, "未找到需要的数据");
	return (*p)[m_curr];
}

std::shared_ptr<std::vector<std::string>> StrBlobPtr::check(std::size_t sz, const std::string& msg)const
{
	auto ret = m_wptr.lock();
	if (!ret)
		throw std::runtime_error("错误");
	if (sz > ret->size())
		throw std::out_of_range(msg);
	return ret;
}

bool operator==(const StrBlobPtr& first, const StrBlobPtr& last)
{
	return first.m_curr == last.m_curr;
}
bool operator!=(const StrBlobPtr& first, const StrBlobPtr& last)
{
	return !(first == last);
}

bool operator>(const StrBlobPtr& first, const StrBlobPtr& last)
{
	return first.m_curr > last.m_curr;
}

bool operator<(const StrBlobPtr& first, const StrBlobPtr& last)
{
	return !(first > last);
}

//StrVec.h

#pragma once
#ifndef STRVEC_H
#define STRVEC_H
#include <memory>
#include <string>
#include <initializer_list>
#include <algorithm>
class StrVec
{
private:
	std::string* elements;
	std::string* first_free;
	std::string* cap;
	std::allocator<std::string> alloc;
private://友元函数(运算符重载)
	friend bool operator==(const StrVec&, const StrVec&);
	friend bool operator!=(const StrVec&, const StrVec&);
	friend bool operator>(const StrVec&, const StrVec&);
	friend bool operator<(const StrVec&, const StrVec&);
public:
	StrVec();
	StrVec(std::initializer_list<std::string>);
	StrVec(const StrVec&);
	~StrVec();
	std::string* begin();
	std::string* begin()const;
	std::string* end();
	std::string* end()const;
	std::size_t size()const;
	std::size_t capacity()const;
	void push_back(const std::string&);
	void pop_back();
	bool empty()const;	
	void reserve(std::size_t);
	void resize(std::size_t);
	void resize(size_t, const std::string&);
private://工具函数
	//内存分配
	std::pair<std::string*, std::string*> alloc_n_copy(const std::string*, const std::string*);
	void reallocate();
	void chk_n_alloc();
	void range_initialize(const std::string* first, const std::string* last);
	void alloc_n_move(std::size_t new_cap);
	//释放内存
	void free();
};

bool operator==(const StrVec&, const StrVec&);
bool operator!=(const StrVec&, const StrVec&);
bool operator>(const StrVec&, const StrVec&);
bool operator<(const StrVec&, const StrVec&);

#endif

//StrVec.cpp

#include "StrVec.h"

StrVec::StrVec() :elements(nullptr), first_free(nullptr), cap(nullptr) {}

StrVec::StrVec(std::initializer_list<std::string> str)
{
	range_initialize(str.begin(), str.end());
}

StrVec::StrVec(const StrVec& sv)
{
	auto newdata=alloc_n_copy(sv.begin(), sv.end());
	elements = newdata.first;
	first_free = cap = newdata.second;
}
StrVec::~StrVec() { free(); }
std::string* StrVec::begin() { return elements; }
std::string* StrVec::begin()const { return elements; }
std::string* StrVec::end() { return first_free; }
std::string* StrVec::end()const { return first_free; }
std::size_t StrVec::size()const { return first_free - elements; }
std::size_t StrVec::capacity()const { return cap - elements; }
bool StrVec::empty()const { return size() == 0; }

void StrVec::push_back(const std::string& str)
{
	chk_n_alloc();
	alloc.construct(first_free++, str);
}
void StrVec::pop_back(){}//待维护

void StrVec::reserve(std::size_t new_cap)
{
	if (new_cap <= capacity())return;
	alloc_n_move(new_cap);
}

void StrVec::resize(std::size_t count)
{
	resize(count, std::string());
}
void StrVec::resize(std::size_t count, const std::string& s)
{
	if (count > size())
	{
		if (count > capacity())reserve(count * 2);
		for (std::size_t i = size(); i != count; ++i)
			alloc.construct(first_free++, s);
	}
	else if (count < size())
	{
		while (first_free != elements + count)
			alloc.destroy(--first_free);
	}
}

std::pair<std::string*, std::string*> StrVec
	::alloc_n_copy(const std::string* first, const std::string* last)
{
	auto newdata = alloc.allocate(last - first);
	return std::make_pair(newdata, std::uninitialized_copy(first, last, newdata));
}

void StrVec::range_initialize(const std::string* first, const std::string* last)
{
	auto newdata = alloc_n_copy(first, last);
	elements = newdata.first;
	first_free = cap = newdata.second;
}

void StrVec::reallocate()
{
	auto newdata = size() ? 2 * size() : 1;
	alloc_n_move(newdata);
}

void StrVec::chk_n_alloc()
{
	if (size() == capacity())
		reallocate();
}

void StrVec::alloc_n_move(std::size_t new_cap)
{
	auto newdata = alloc.allocate(new_cap);
	auto dest = newdata;
	auto elem = elements;
	for (std::size_t i = 0; i != size(); ++i)
		alloc.construct(dest++, std::move(*elem++));
	free();
	elements = newdata;
	first_free  = dest;
	cap = elements + new_cap;
}

void StrVec::free()
{
	if (elements)
	{
		for (auto p = first_free; p != elements;)
			alloc.destroy(--p);
		alloc.deallocate(elements, cap - elements);
	}
}

bool operator==(const StrVec& first, const StrVec& last)
{
	if (first.size() != last.size())
	{
		return false;
	}
	else
	{
		auto l_iter = first.begin();
		auto r_iter = last.begin();
		for (l_iter, r_iter; l_iter != first.end(); ++l_iter, ++r_iter)
		{
			if (*l_iter != *r_iter)
				return false;
		}
	}
	return true;
}
bool operator!=(const StrVec& first, const StrVec& last)
{
	return !(first == last);
}

bool operator>(const StrVec& first, const StrVec& last)
{
	return std::lexicographical_compare
	(first.begin(), first.end(), last.begin(), last.end());
}

bool operator<(const StrVec& first, const StrVec& last)
{
	return !(first > last);
}

//String.h

#pragma once
#ifndef STRING_H
#define STRING_H

#include <iostream>
#include <memory>
class String
{
private:
	char* elements;
	char* first_free;
	std::allocator<char> alloc;
private:
	friend bool operator==(const String&, const String&);
	friend bool operator!=(const String&, const String&);
	friend bool operator>(const String&, const String&);
	friend bool operator<(const String&, const String&);
private:
	friend std::ostream& operator<<(std::ostream&, const String&);
public:
	String();
	String(const char*);
	String(const String&);
	String& operator=(const String&);
	const char* c_str()const;
	std::size_t size()const;
	std::size_t length()const;
	char* begin()const;
	char* end()const;
	char* begin();
	char* end();
	~String();
private:
	std::pair<char*, char*> alloc_n_copy(const char*, const char*);
	void range_initializer(const char*, const char*);
	void free();
};
std::ostream& operator<<(std::ostream&, const String&);
bool operator==(const String&, const String&);
bool operator!=(const String&, const String&);
bool operator>(const String&, const String&);
bool operator<(const String&, const String&);


#endif

//String.cpp

#include "String.h"

String::String() :String("") {}

String::String(const String& str)
{
	range_initializer(str.elements, str.end);
	std::cout << "调用拷贝构造函数" << std::endl;
}

String::String(const char* str)
{
	char* s = const_cast<char*>(str);
	while (*s)
	{
		++s;
	}
	range_initializer(str, ++s);
}

String& String::operator=(const String& str)
{
	if (this != &str)
	{
		auto newdata = alloc_n_copy(str.elements, str.first_free);
		free();
		elements = newdata.first;
		first_free = newdata.second;
	}
	return *this;
}

const char* String::c_str()const
{
	return elements;
}

std::size_t String::size()const
{
	return first_free - elements;
}
std::size_t String::length()const
{ 
	return first_free - elements - 1;
}

char* String::begin()const { return elements; }
char* String::end()const { return first_free; }
char* String::begin() { return elements; }
char* String::end() { return first_free; }

String::~String()
{
	free();
}

std::pair<char*, char*> String::alloc_n_copy(const char* first, const char* last)
{
	auto newdata = alloc.allocate(last - first);
	return { newdata,std::uninitialized_copy(first,last,newdata) };
}

void String::range_initializer(const char* first, const char* last)
{
	auto newdata = alloc_n_copy(first, last);
	elements = newdata.first;
	first_free = newdata.second;
}

void String::free()
{
	if (elements)
	{
		for (auto i = first_free; i != elements;)
		{
			alloc.destroy(--i);
		}
		//std::for_each(elements, end, [this](char& c) {alloc.destroy(&c); });
		alloc.deallocate(elements, first_free - elements);
	}
}

std::ostream& operator<<(std::ostream& os, const String& str)
{
	char* str_s = const_cast<char*>(str.c_str());
	while (*str_s)
	{
		os << *str_s++;
	}
	return os;
}

bool operator==(const String& first, const String& last)
{
	if (first.size() != last.size())
	{
		return false;
	}
	else
	{
		auto l_iter = first.begin();
		auto r_iter = last.begin();
		for (l_iter, r_iter; l_iter != first.end(); ++l_iter, ++r_iter)
		{
			if (*l_iter != *r_iter)
				return false;
		}
	}
	return true;
}
bool operator!=(const String& first, const String& last)
{
	return !(first == last);
}

bool operator>(const String& first, const String& last)
{
	return std::lexicographical_compare
	(first.begin(), first.end(), last.begin(), last.end());
}

bool operator<(const String& first, const String& last)
{
	return !(first > last);
}