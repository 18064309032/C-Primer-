//Data.h

#pragma once
#ifndef DATE_H
#define DATE_H

#ifndef _MSC_VER
#define NOEXCEPT noexcept
#else
#define NOEXCEPT
#endif

#include <iostream>
#include <vector>
#include <algorithm>
class Date
{
private:
	std::size_t day = 1;
	std::size_t month = 1;
	std::size_t year = 0;
private:
	friend bool operator==(const Date&, const Date&);//等于
	friend bool operator!=(const Date&, const Date&);//不等于
	friend bool operator>(const Date&, const Date&);//大于
	friend bool operator>=(const Date&, const Date&);//大于等于
	friend bool operator<(const Date&, const Date&);//小于
	friend bool operator<=(const Date&, const Date&);//小于等于
	friend int  operator-(const Date&, const Date&);//减
	friend inline bool isLeapYear(std::size_t y);
	friend std::istream& operator>>(std::istream&, Date&);//输入
	friend std::ostream& operator<<(std::ostream&, const Date&);//输出
	friend bool check(const Date&);//判断
public:
	Date() = default;
	explicit Date(std::size_t);
	Date(std::size_t d, std::size_t m, std::size_t y);
	Date(std::istream&, std::ostream&);
	Date(Date&&)NOEXCEPT;
	Date(const Date&);
	Date& operator=(const Date&);
	Date& operator=(Date&&)NOEXCEPT;
	Date& operator+=(std::size_t);
	Date& operator-=(std::size_t);
	explicit operator bool() { return (year > 4000) ? true : false; }
	std::size_t toDays()const;
private:
	
};
static std::size_t YtoD_400 = 14097;
static std::size_t YtoD_100 = 36524;
static std::size_t YtoD_4 = 1461;
static std::size_t YtoD_1 = 365;

static const std::vector<std::size_t> monthsVec_n =
{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };


static const std::vector<std::size_t> monthsVec_l =
{ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };


bool operator==(const Date&, const Date&);//等于
bool operator!=(const Date&, const Date&);//不等于
bool operator>(const Date&, const Date&);//大于
bool operator>=(const Date&, const Date&);//大于等于
bool operator<(const Date&, const Date&);//小于
bool operator<=(const Date&, const Date&);//小于等于
int  operator-(const Date&, const Date&);//减

std::istream& operator>>(std::istream&, Date&);//输入
std::ostream& operator<<(std::ostream&, const Date&);//输出

inline bool isLeapYear(std::size_t y);
bool check(const Date& d);

#endif

//Data.cpp

#include "Date.h"

Date::Date(std::size_t days)
{
	std::size_t y400 = days / YtoD_400;
	std::size_t y100 = (days - y400 * YtoD_400) / YtoD_100;
	std::size_t y4 = (days - y400 * YtoD_400 - y100 * YtoD_100) / YtoD_4;
	std::size_t y = (days - y400 * YtoD_400 - y100 * YtoD_100 - y4 * YtoD_4) / 365;
	std::size_t d = days - y400 * YtoD_400 - y100 * YtoD_100 - y4 * YtoD_4 - y * 365;
	this->year = y400 * 400 + y100 * 100 + y4 * 4 + y;
	std::vector<std::size_t>currYear
		= isLeapYear(this->year) ? monthsVec_l : monthsVec_n;

	// calculate day and month using find_if + lambda
	std::size_t D_accumu = 0, M_accumu = 0;
	// @bug    fixed:  the variabbles above hade been declared inside the find_if as static
	//                 which caused the bug. It works fine now after being move outside.

	std::find_if(currYear.cbegin(), currYear.cend(), [&](std::size_t m)
		{

			D_accumu += m;
			M_accumu++;

			if (d < D_accumu)
			{
				this->month = M_accumu;
				this->day = d + m - D_accumu;

				return true;
			}
			else
				return false;
		});
}

Date::Date(std::istream& is, std::ostream& os)
{
	is >> day >> month >> year;

	if (is)
	{
		if (check(*this)) return;
		else
		{
			os << "Invalid input! Object is default initialized.";
			*this = Date();
		}
	}
	else
	{
		os << "Invalid input! Object is default initialized.";
		*this = Date();
	}

}

Date::Date(const Date& d) :
	day(d.day), month(d.month), year(d.year)
{}

Date::Date(Date&& d) NOEXCEPT :
	day(d.day), month(d.month), year(d.year)
{
	std::cout << "copy moving";
}

Date& Date::operator= (const Date& d)
{
	this->day = d.day;
	this->month = d.month;
	this->year = d.year;

	return *this;
}

Date& Date::operator =(Date&& rhs) NOEXCEPT
{
	if (this != &rhs)
	{
		this->day = rhs.day;
		this->month = rhs.month;
		this->year = rhs.year;
	}
	std::cout << "moving =";

	return *this;
}

std::size_t Date::toDays() const
{
	std::size_t result = this->day;

	// check if leap and choose the months vector accordingly
	std::vector<std::size_t>currYear
		= isLeapYear(this->year) ? monthsVec_l : monthsVec_n;

	// calculate result + days by months
	for (auto it = currYear.cbegin(); it != currYear.cbegin() + this->month - 1; ++it)
		result += *it;

	// calculate result + days by years
	result += (this->year / 400) * YtoD_400;
	result += (this->year % 400 / 100) * YtoD_100;
	result += (this->year % 100 / 4) * YtoD_4;
	result += (this->year % 4) * YtoD_1;

	return result;
}

// member operators:   +=  -=

Date& Date::operator +=(std::size_t offset)
{
	*this = Date(this->toDays() + offset);
	return *this;
}

Date& Date::operator -=(std::size_t offset)
{
	if (this->toDays() > offset)
		*this = Date(this->toDays() - offset);
	else
		*this = Date();

	return *this;
}

// non-member operators:  <<  >>  -   ==  !=  <   <=  >   >=

std::ostream&
operator <<(std::ostream& os, const Date& d)
{
	os << d.day << " " << d.month << " " << d.year;
	return os;
}

std::istream&
operator >>(std::istream& is, Date& d)
{
	if (is)
	{
		Date input = Date(is, std::cout);
		if (check(input))    d = input;
	}
	return is;
}


int operator -(const Date& lhs, const Date& rhs)
{
	return lhs.toDays() - rhs.toDays();
}


bool operator ==(const Date& lhs, const Date& rhs)
{
	return (lhs.day == rhs.day) &&
		(lhs.month == rhs.month) &&
		(lhs.year == rhs.year);
}


bool operator !=(const Date& lhs, const Date& rhs)
{
	return !(lhs == rhs);
}


bool operator < (const Date& lhs, const Date& rhs)
{
	return lhs.toDays() < rhs.toDays();
}


bool operator <=(const Date& lhs, const Date& rhs)
{
	return (lhs < rhs) || (lhs == rhs);
}


bool operator >(const Date& lhs, const Date& rhs)
{
	return !(lhs <= rhs);
}


bool operator >=(const Date& lhs, const Date& rhs)
{
	return !(lhs < rhs);
}


Date operator - (const Date& lhs, std::size_t rhs)
{                                       //  ^^^ rhs must not be larger than 2^32-1
	// copy lhs
	Date result(lhs);
	result -= rhs;

	return result;
}


Date operator + (const Date& lhs, std::size_t rhs)
{                                       //  ^^^ rhs must not be larger than 2^32-1
	// copy lhs
	Date result(lhs);
	result += rhs;

	return result;
}

bool check(const Date& d)
{
	if (d.month == 0 || d.month > 12)
		return false;
	else
	{
		if (d.month == 1 || d.month == 3 || d.month == 5 ||
			d.month == 7 || d.month == 8 || d.month == 10 || d.month == 12)
		{
			if (d.day == 0 || d.day > 31)return false;
			else return true;
		}
		else
		{
			if (isLeapYear(d.year))
			{
				if (d.day == 0 || d.day > 29)return false;
				else return true;
			}
			else
			{
				if (d.day == 0 || d.day > 28)return false;
				else return true;
			}
		}
	}
}
inline bool isLeapYear(std::size_t y)
{
	if (!(y % 400))
		return true;
	else
	{
		if (!(y % 100))
			return false;
		else
			return !(y % 4);
	}
}