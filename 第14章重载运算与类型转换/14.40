#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
class ShorterString
{
public:
	bool operator()(const std::string& first, const std::string& last)
	{
		return first.size() < last.size();
	}
};

class BiggerEqual
{
private:
	std::size_t sz;
public:
	BiggerEqual(std::size_t s) :sz(s) {}
	bool operator()(const std::string& str) { return sz >= str.size(); }
};

class Print
{
public:
	void operator()(const std::string& str) { std::cout << str; }
};

std::string make_plural(std::size_t sz, const std::string& word, const std::string& ending)
{
	return (sz > 1) ? word + ending:word;
}

void elimDups(std::vector<std::string>& words)
{
	std::sort(words.begin(), words.end());
	auto end_unique = std::unique(words.begin(), words.end());
	words.erase(end_unique, words.end());
}

void biggies(std::vector<std::string>& words, std::vector<std::string>::size_type sz)
{
	elimDups(words);
	std::stable_sort(words.begin(), words.end(),ShorterString());
	auto wc = std::find_if(words.begin(), words.end(), BiggerEqual(sz));
	auto count = words.end() - wc;
	std::cout << count << " " << make_plural(count, "words", "s")
		<< "of length" << sz << "or longer" << std::endl;
	std::for_each(wc, words.end(), Print());
	std::cout << std::endl;
}

int main()
{
	std::vector<std::string> 
		vec{ "fox", "jumps", "over", "quick", "red", "red", "slow", "the", "turtle" };
	biggies(vec, 4);
	return 0;
}