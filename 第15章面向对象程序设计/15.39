//Query.h

#pragma once
#include "Query_Base.h"
#include "WordQuery.h"
class Query
{
private:
	std::shared_ptr<Query_Base> q;
private:
	Query(std::shared_ptr<Query_Base>);
private:
	friend Query operator~(const Query&);
	friend Query operator|(const Query&, const Query&);
	friend Query operator&(const Query&, const Query&);
public:
	Query(const std::string&);
	std::string rep()const;
	QueryResult eval(const TextQuery&)const;
};

std::ostream& operator<<(std::ostream&, const Query&);

//Query.cpp

#include "Query.h"

Query::Query(const std::string& s) :q(new WordQuery(s)) {}

Query::Query(std::shared_ptr<Query_Base> query) : q(query) {}

std::ostream& operator<<(std::ostream& os, const Query& q)
{
	return os << q.rep();
}

QueryResult Query::eval(const TextQuery& t)const
{
	return q->eval(t);
}

std::string Query::rep()const
{
	return q->rep();
}

//Query_Base.h

#pragma once
#include "textquery.h"
#include "QueryResult.h"
class Query_Base
{
private:
	friend class Query;
private:
	virtual QueryResult eval(const TextQuery&)const = 0;
	virtual std::string rep()const = 0;
protected:
	virtual ~Query_Base();
};

//Query_Base.cpp

#include "Query_Base.h"

Query_Base::~Query_Base() = default;