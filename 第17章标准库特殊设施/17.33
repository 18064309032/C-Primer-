#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <fstream>
#include <random>
#include <ctime>
#include <stdexcept>
#include <sstream>

std::map<std::string, std::vector<std::string>> buildMap(std::ifstream& map_file)
{
	std::map<std::string, std::vector<std::string>> trans_map;
	std::string key;
	std::string value;

	while (map_file >> key && std::getline(map_file, value))

		if (value.size() > 1)
			trans_map[key].push_back(value.substr(1));
		else
			throw std::runtime_error("no rule for " + key);

	return trans_map;
}

const std::string& transform(const std::string& s, 
	const std::map<std::string,
	std::vector<std::string>>& m)
{
	static std::default_random_engine e(time(0));
	static std::uniform_int_distribution<unsigned int> u(0, 1);

	auto map_it = m.find(s);

	if (map_it != m.cend())
		return (map_it->second)[u(e)];
	else
		return s;
}

void word_transform(std::ifstream& map_file, std::ifstream& input)
{
	auto trans_map = buildMap(map_file);

	std::string text;

	while (std::getline(input, text))
	{
		std::istringstream stream(text);
		std::string word;
		bool firstword = true;
		while (stream >> word)
		{
			if (firstword)
				firstword = false;
			else
				std::cout << " ";
			std::cout << transform(word, trans_map);
		}
		std::cout << std::endl;
	}
}

int main()
{
	std::ifstream map_file("D:\\文件.txt"), input("D:\\新文件.txt");
	word_transform(map_file, input);
	return 0;
}       