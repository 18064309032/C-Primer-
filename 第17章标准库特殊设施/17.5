//Hash.h

#pragma once
#include <tuple>
#include <vector>
#include <algorithm>
#include <numeric>
#include "Sales_data.h"

namespace std
{
	template <>
	struct hash<Sales_data>
	{
		typedef size_t result_type;
		typedef Sales_data argument_type;
		size_t operator()(const Sales_data& s) const;
	};
}

bool compareIsbn(const Sales_data&, const Sales_data&);

//typedef std::tuple<std::vector<Sales_data>::size_type, 
//	std::vector<Sales_data>::const_iterator, 
//	std::vector<Sales_data>::const_iterator> matches;

typedef std::pair<std::vector<Sales_data>::size_type,
	std::pair<std::vector<Sales_data>::const_iterator,
	std::vector<Sales_data>::const_iterator>> matches;

//struct matches
//{
//	std::vector<Sales_data>::size_type index;
//	std::vector<Sales_data>::const_iterator first;
//	std::vector<Sales_data>::const_iterator last;
//	matches(std::vector<Sales_data>::size_type i,
//		std::vector<Sales_data>::const_iterator f,
//		std::vector<Sales_data>::const_iterator l) 
//		:index(i), first(f), last(l) {}
//};


std::vector<matches> findBook(const std::vector<std::vector<Sales_data>>&, const std::string&);
void reportResults(std::istream& in, std::ostream& os,
	const std::vector<std::vector<Sales_data>>& files);

//Hash.cpp

#include "Hash.h"

size_t std::hash<Sales_data>::operator()(const Sales_data& s) const
{
	return hash<std::string>()(s.m_bookNo)
		^ hash<unsigned>()(s.m_units_sold)
		^ hash<double>()(s.m_revenue);
}

bool compareIsbn(const Sales_data& lhs, const Sales_data& rhs)
{
	return lhs.isbn() < rhs.isbn();
}

std::vector<matches> findBook(const std::vector<std::vector<Sales_data>>& files, const std::string& book)
{
	std::vector<matches> ret;
	for (auto it = files.cbegin(); it != files.cend(); ++it)
	{
		auto found = std::equal_range(it->cbegin(), it->cend(), Sales_data(book), compareIsbn);
		if (found.first != found.second)
			ret.push_back(std::make_pair(it - files.cbegin(), std::make_pair(found.first, found.second)));
			//ret.push_back(matches(it - files.cbegin(), found.first, found.second));
	}
	return ret;
}

void reportResults(std::istream& in, std::ostream& os, const std::vector<std::vector<Sales_data>>& files)
{
	std::string s;
	while (in >> s)
	{
		auto trans = findBook(files, s);
		if (trans.empty())
		{
			std::cout << s << " not found in any stores" << std::endl;
			continue;
		}
		for (const auto& store : trans)
			os << "store " << store.first << 
			std::accumulate(store.second.first, store.second.second,Sales_data(s));
		/*os << "store " << store.index <<
			std::accumulate(store.first, store.last, Sales_data(s));*/
	}
}

//main.cpp

#include "Hash.h"
int main()
{
	Sales_data sales_data1("001-01", 1, 100);
	Sales_data sales_data2("001-01", 2, 100);
	Sales_data sales_data3("001-02", 2, 80);

	std::vector<Sales_data> vs1 = { sales_data1, sales_data3 };
	std::vector<Sales_data> vs2 = { sales_data2 };
	std::vector<std::vector<Sales_data>> vvs = { vs1, vs2 };

	reportResults(std::cin, std::cout, vvs);

	return 0;
}